{"version":3,"sources":["Component/Slider/Slider.js","Pages/Home.js","Component/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["SwiperCore","use","Autoplay","EffectFade","Slider","className","effect","spaceBetween","loop","slidesPerView","autoplay","delay","disableOnInteraction","to","src","alt","Component","Home","NavDesk","React","lazy","NavMob","Navigation","window","innerWidth","fallback","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2VAKAA,IAAWC,IAAI,CAACC,IAAWC,M,IACNC,E,uKAEb,OACI,yBAAKC,UAAU,eACZ,kBAAC,IAAD,CAASC,OAAO,OACzBC,aAAc,GACdC,MAAM,EACNC,cAAe,EACfC,SAAU,CACRC,MAAM,IACNC,sBAAqB,IAGvB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,IACT,yBAAKR,UAAU,aAAaS,IAAI,iHAAiHC,IAAI,mBAGzJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMF,GAAG,IACT,yBAAKR,UAAU,aAAaS,IAAI,iHAAiHC,IAAI,yB,GApB3HC,aCJrB,SAASC,IACpB,OACI,6BACI,kBAAC,EAAD,O,UCHNC,EAAUC,IAAMC,MAAK,kBAAM,gCAC3BC,EAASF,IAAMC,MAAK,kBAAM,gCACXE,E,uKAEjB,OACE,6BACGC,OAAOC,WAAa,IACnB,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,EAAD,OAGF,kBAAC,WAAD,CAAUA,SAAU,4CAClB,kBAACJ,EAAD,Y,GAV4BL,aCEnBU,G,6KAIjB,OACE,6BACE,kBAAC,EAAD,MACF,kBAACT,EAAD,W,GAP2BD,cCM3BW,EAAcC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDUnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,eAAwBnC,OAAOM,SAAS8B,MACpDC,SAAWrC,OAAOM,SAAS+B,OAIvC,OAGFrC,OAAOsC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,eAAN,sBAEP/B,IAgEV,SAAiCM,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7Bf,OAAOM,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OChC/BE,K","file":"static/js/main.a9ff914a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport SwiperCore, { Autoplay ,EffectFade} from 'swiper';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper-bundle.css';\r\nSwiperCore.use([Autoplay , EffectFade]);\r\nexport default class Slider extends Component {\r\n    render() {\r\n        return (\r\n            <div className='slider-main'>\r\n               <Swiper  effect=\"fade\"\r\n      spaceBetween={30}  \r\n      loop={true}\r\n      slidesPerView={1}\r\n      autoplay={{\r\n        delay:3000,\r\n        disableOnInteraction:false\r\n    }}\r\n    >\r\n      <SwiperSlide>\r\n          <Link to=''>\r\n          <img className='slider-img' src='https://images.pexels.com/photos/3680746/pexels-photo-3680746.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940' alt='company-logo'></img>\r\n          </Link>\r\n      </SwiperSlide>\r\n      <SwiperSlide>\r\n          <Link to=''>\r\n          <img className='slider-img' src='https://images.pexels.com/photos/4755027/pexels-photo-4755027.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940' alt='company-logo'></img>\r\n          </Link>\r\n      </SwiperSlide>\r\n    </Swiper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Slider from '../Component/Slider/Slider'\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            <Slider />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component, Suspense } from \"react\";\r\nimport './NavDesk.css';\r\nconst NavDesk = React.lazy(() => import(\"./NavDesk\"));\r\nconst NavMob = React.lazy(() => import(\"./NavMob\"));\r\nexport default class Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {window.innerWidth > 900 ? (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <NavDesk />\r\n          </Suspense>\r\n        ) : (\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <NavMob />\r\n          </Suspense>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component,Suspense} from \"react\";\r\nimport { Switch, Route} from \"react-router-dom\";\r\nimport Loading from \"./Component/Loading/Loading\";\r\nimport Home from './Pages/Home'\r\nimport Navigation from './Component/Navigation/Navigation'\r\nimport \"./App.css\";\r\nexport default class App extends Component {\r\n  render() {\r\n//     const Home =React.lazy(() => import('./Pages/Home'));\r\n//     const Error =React.lazy(() => import('./Pages/Error'));\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n      <Home />\r\n    {/* <Suspense fallback={<Loading />}>\r\n       <Navigation />\r\n       <Switch>\r\n         <Route exact path=\"/\" component={Home}/>\r\n         <Route component={Home}/>\r\n      </Switch>\r\n     </Suspense> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nReactDOM.render(\r\n  <Router >\r\n    <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}